// <auto-generated />
namespace PhantomNet.Entities.EntityFrameworkCore
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("PhantomNet.Entities.EntityFrameworkCore.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// Entity type {0} must be {1}.
        /// </summary>
        internal static string EntityTypeNotSupported
        {
            get { return GetString("EntityTypeNotSupported"); }
        }

        /// <summary>
        /// Entity type {0} must be {1}.
        /// </summary>
        internal static string FormatEntityTypeNotSupported(object p0, object p1)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeNotSupported"), p0, p1);
        }

        /// <summary>
        /// Entity type {0} must be {1} or {2}.
        /// </summary>
        internal static string EntityTypeOrSubEntityTypeNotSupported
        {
            get { return GetString("EntityTypeOrSubEntityTypeNotSupported"); }
        }

        /// <summary>
        /// Entity type {0} must be {1} or {2}.
        /// </summary>
        internal static string FormatEntityTypeOrSubEntityTypeNotSupported(object p0, object p1, object p2)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("EntityTypeOrSubEntityTypeNotSupported"), p0, p1, p2);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
